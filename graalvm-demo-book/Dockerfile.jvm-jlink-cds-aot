ARG BUILDER_WORKDIR="/usr/src/lecture-graalvm"
ARG BUILDER_DIST_DIR="${BUILDER_WORKDIR}/target/dist"
ARG BUILDER_JRE_DIR="${BUILDER_WORKDIR}/target/jre"
#############################
# Build Application
#############################
FROM eclipse-temurin:21.0.3_9-jdk-alpine as builder
ARG BUILDER_WORKDIR
WORKDIR ${BUILDER_WORKDIR}

COPY pom.xml mvnw ./
COPY .mvn .mvn
RUN ./mvnw verify --fail-never
COPY src src
RUN ./mvnw compile spring-boot:process-aot package
ARG BUILDER_DIST_DIR
RUN java -Djarmode=tools -jar target/graalvm-book-*.jar extract --layers --launcher --destination "${BUILDER_DIST_DIR}"
# The following command tries to detect the required JVM modules; you can also list all of the with: java --list-modules
RUN jdeps --ignore-missing-deps --print-module-deps --recursive --multi-release 21 --class-path "${BUILDER_DIST_DIR}/dependencies/BOOT-INF/lib/*" "${BUILDER_DIST_DIR}" > target/deps.info
ARG BUILDER_JRE_DIR
# We need to add jdk.naming.dns,jdk.crypto.ec to the required modules, because they are only loaded during runtime and therefore cannot be detected by jdeps
RUN jlink --add-modules "$(cat target/deps.info),jdk.naming.dns,jdk.crypto.ec" --strip-debug --compress zip-6 --no-header-files --no-man-pages --output "${BUILDER_JRE_DIR}"
# Generate CDS archive for JRE
RUN "${BUILDER_JRE_DIR}/bin/java" -Xshare:dump


#############################
# Build Layered Image
#############################
FROM alpine:3.20 

RUN adduser -D -H -s /bin/false -u 1000 appuser

ENV JAVA_HOME="/opt/java/openjdk"
ENV PATH=$JAVA_HOME/bin:$PATH
ARG BUILDER_JRE_DIR
COPY --from=builder ${BUILDER_JRE_DIR} $JAVA_HOME

WORKDIR /opt/dist
ARG BUILDER_DIST_DIR
COPY --from=builder ${BUILDER_DIST_DIR}/dependencies/ ./
COPY --from=builder ${BUILDER_DIST_DIR}/snapshot-dependencies/ ./
COPY --from=builder ${BUILDER_DIST_DIR}/spring-boot-loader/ ./
COPY --from=builder ${BUILDER_DIST_DIR}/application/ ./

# Generate AppCDS archive
RUN java -Dspring.aot.enabled=true -XX:ArchiveClassesAtExit=dist.jsa -Dspring.context.exit=onRefresh -Dspring.main.lazy-initialization=false -server "org.springframework.boot.loader.launch.JarLauncher" \
    && rm -rf /tmp/*

CMD exec java ${JAVA_OPTS} -Dspring.aot.enabled=true -XX:SharedArchiveFile=dist.jsa -server "org.springframework.boot.loader.launch.JarLauncher"

EXPOSE 8080

USER appuser
